name: Test Installation on Multiple Python Versions

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      # When one build fails, all other builds will continue to run
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    # Save initial pip state
    - name: Save initial pip state
      run: pip freeze > initial_requirements.txt
    
    - name: Test pynbody installation on Python 3.8
      if: matrix.python-version == '3.8'
      run: |
        pip install --upgrade pip setuptools wheel
        pip install "numpy<1.22" "cython<3.0"
        pip install pynbody
        # Test that pynbody works
        python -c "import pynbody; print('pynbody installation successful')"
        # Clean up pynbody and its dependencies
        pip uninstall pynbody -y
        pip uninstall cython -y

    - name: Test pynbody installation on other Python versions
      if: matrix.python-version != '3.8'
      run: |
        pip install pynbody
        # Test that pynbody works
        python -c "import pynbody; print('pynbody installation successful')"
        # Clean up pynbody
        pip uninstall pynbody -y

    # Optional: Full environment reversion
    - name: Revert to initial pip state (optional)
      run: |
        pip freeze > current_requirements.txt
        # Show what changed
        echo "Packages that were added:"
        comm -13 initial_requirements.txt current_requirements.txt || true

    - name: Install package
      run: pip install .
      # If your package has optional dependencies for testing, you might use:
      # pip install .[test]